# Cobalt Strike to Ghostwriter Oplog Syncing
# Tested on Ghostwriter 2.0 through 2.2
# Execute `oplog.cna` via agscript on your teamserver to report activity from all operators on the teamserver.
# Authors: Daniel Heinsen and Andrew Chiles (SpecterOps)

# Modifiable Variables, change these
###########################################
$oplog::GhostwriterOplogURL = "<https://ghostwriter.local>";
$oplog::GhostwriterOplogID = "<ID>";
$oplog::GhostwriterOplogAPIKey = "<API KEY>";
###########################################

import java.io.File;
import java.io.FileOutputStream;
import java.io.OutputStreamWriter;
import java.nio.charset.StandardCharsets;
import java.net.HttpURLConnection;
import java.net.URL;

global('$oplog::GhostwriterConnected');
$oplog::GhostwriterConnected = true;

# For development with self-signed certificates, you must export and add the GW certificate into your local Java trust store 
# In Firefox, Chrome, etc -> View Certifiate -> Export as PEM
# Next, import the certificate into the Java runtime you're using to run Cobalt Strike. When prompted for a keystore password, "changeit" is the Java default
# sudo keytool -import -alias gw-dev -keystore /usr/lib/jvm/java-8-oracle/jre/lib/security/cacerts -file ~/Downloads/cert.pem
# sudo keytool -import -alias gw-dev -keystore /usr/lib/jvm/java-11-openjdk-amd64/lib/security/cacerts -file ~/Downloads/cert.pem 

sub oplog::dictionaryToJson {
    local('$jsonBlob %data $value $propertyName');
    $jsonBlob = "{";
    %data = $1;

    foreach $propertyName (keys(%data)) {
        $value = strrep(%data[$propertyName], "\"", "");
        $value = strrep($value, "\\", "\\\\");
        $jsonBlob .= "\"" . $propertyName . "\":\"" . $value . "\",";
    }

    $jsonBlob = substr($jsonBlob, 0, -1);
    $jsonBlob .= "}";

    return $jsonBlob;

}

sub oplog::post_command {
    # This function creates an entry in the GW oplog (POST)
    local('$1 $urlobj $con $wr $responseCode $api_key $url %data $data_json $escaped $error_message');
    $url = $oplog::GhostwriterOplogURL;
    
    # This has to include the trailing / or it's treated like a different endpoint altogether
    $url .= "/oplog/api/entries/";

    $api_key = $oplog::GhostwriterOplogAPIKey;
    
    # Raw message in dictionary
    %data = $1;
    # JSON formatted message
    $data_json = oplog::dictionaryToJson($1);

    try
    {
        $urlobj = [new URL: $url];
        $con = [$urlobj openConnection];
        [$con setRequestProperty: "User-Agent", "BEACON"];
        [$con setRequestMethod: "POST"];
        [$con setDoOutput: true];
        [$con setConnectTimeout: 5000];
        [$con setRequestProperty: "Content-Type", "application/json; charset=utf-8"];
        [$con setRequestProperty: "Authorization", "Api-Key " . $api_key];

        $wr = [new OutputStreamWriter: [$con getOutputStream]];
        [$wr write: $data_json];
        [$wr flush];
        [$wr close];
    }
    catch $exception
    {
        println("[-] Oplog Web Exception: " . $exception);
        
        # Since a connection error occurred, log the command to disk for eventual manual upload
        oplog::saveToDisk(%data['start_date'], %data['source_ip'], %data['dest_ip'], %data["user_context"], %data['command'], %data['operator_name'], %data['oplog_id'] ); 

        # Ghostwriter server was probably unreachable, if we're not already in a "disconnected" state then show an error to the user
        if( $oplog::GhostwriterConnected == true ) {
            $oplog::GhostwriterConnected = false;
            $error_message = "[-] You have configured Ghostwriter oplog, but " . $oplog::GhostwriterOplogURL . " is unreachable. Check your firewall rules. Logs will be stored in offline_logs.csv until connectivity is restored. \n                       Exception: " . $exception;
            elog($error_message);
        }
        # Return with generic error
        return 1;
    }
    
    # Get the HTTP Response code from our API call
    $responseCode = [$con getResponseCode];

    # Send a notice to the user if we don't get a 201 response (entry created), but only report this error once
    #println($oplog::GhostwriterConnected); # Debugging
    if( $oplog::GhostwriterConnected == true && $responseCode != 201 ) {
        $oplog::GhostwriterConnected = false;
        # We probably had an authentication error if 40X code is received
        if ( 50 isin $responseCode ) {
            $error_message = "[!] Ghostwriter operator logging is configured, but we expected a 201 response and got: " . $responseCode . ". \n                       Probably an authentication issue. Verify the API Key and oplog ID are correct. Logs will be stored in offline_logs.csv until connectivity is restored.";
        }
        # Generic HTTP Error
        else {
            $error_message = "[!] Ghostwriter operator logging is configured, but we expected a 201 response and got: " . $responseCode . ". \n                       Verify your settings. Logs will be stored in offline_logs.csv until connectivity is restored.";
        }
        elog($error_message);
       
        # Since a non HTTP 201 response occurred, log the command to disk for eventual manual upload
        oplog::saveToDisk(%data['start_date'], %data['source_ip'], %data['dest_ip'], %data["user_context"], %data['command'], %data['operator_name'], %data['oplog_id'] ); 
        
        # Return with the HTTP response code
        return $responseCode;
    }
    
    # If we reach this point, then we can assume there were no network errors and we got our expected HTTP response of 201. 
    # Reset the GhostwriterConnected variable to true
    if( $responseCode == 201 ) {
        $oplog::GhostwriterConnected = true;
        #println("Got a good response, resetting"); # Debugging
    }
    # Return with the HTTP response code
    return $responseCode;
}

sub oplog::saveToDisk {
    # In case of an API error, write the log to disk so we don't lose it.
    # TODO: Update this to just take in a dictionary as an argument for simplicity
    local('$timestamp $localIP $destIP $userContext $command $operator $oplog_id $logfile $data $header $handle $error $pid $fileObj $exception $os $utf8 $fileExists $error_message');
    $timestamp = $1;
    $localIP = $2;
    $destIP = $3;
    $userContext = $4;
    $command = $5;
    $operator = $6;
    $oplog_id = $7;
    $fileExists = false;

    try
    {
        local('$tmpFile $fileExists');
        $tmpFile = [new File: "offline_logs.csv"];
        $fileExists = [$tmpFile exists];
    }
    catch $exception
    {
        $error_message = "[!] Failed to check if offline oplog file exists.";
        println($error_message);
        elog($error_message);
        return 1;
    }

    try
    {
        $fileObj = [new FileOutputStream: "offline_logs.csv", true];
        $os = [new OutputStreamWriter: $fileObj];
    }
    catch $exception
    {
        $error_message = "[!] Failed to open offline oplog file.";
        println($error_message);
        elog($error_message);
        return 1;
        
    }

    if ($fileExists == false)
    {
	$header = "oplog_id,start_date,end_date,source_ip,dest_ip,tool,user_context,command,description,output,comments,operator_name\n";
        [$os write: $header];
    }
    # TODO: Replace these with values from the %data dictionary
    $data = $oplog_id;
    $data .= ",";
    $data .= $timestamp;
    $data .= ",";
    $data .= $timestamp;
    $data .= ",\"";
    $data .= $localIP;
    $data .= "\",\"";
    $data .= $destIP;
    $data .= "\",";
    $data .= "Beacon";
    $data .= ",\"";
    $data .= $userContext;
    $data .= "\",\"";
    $data .= $command;
    $data .= "\",";
    $data .= ",";
    $data .= ",";
    $data .= ",\"";
    $data .= $operator;
    $data .= "\"\n";

    try
    {
        [$os write: $data];
        [$os flush];
        [$os close];
        [$fileObj close];
    }
    catch $exception
    {
        $error_message = "[!] Failed to write to offline oplog file.";
        println($error_message);
        elog($error_message);
        return 1;
    }
}


on beacon_initial {
    # Create an oplog entry for the first Beacon check-in
    local('$url $oplog_id $operator %data $api_key $bid $binfo $hostname $pid $resp_code $desc $user');
    $url = $oplog::GhostwriterOplogURL;
    $oplog_id = $oplog::GhostwriterOplogID;
     
    # Do nothing if oplog variables aren't configured
    if (!$url || !$oplog_id) {
        return;
    }
 
    $url .= "/oplog/api/entries/";
    $bid = $1;
    $hostname = binfo($bid, 'computer');
    $pid = binfo($bid, 'pid');
    $user = binfo($bid, 'user');
    #%Y-%m-%d %H:%M:%S"
    # Initial beacon entry doesn't have a timestamp
    %data['start_date'] = formatDate("yyyy-MM-dd HH:mm:ss");
    %data['end_date'] = formatDate("yyyy-MM-dd HH:mm:ss");
    %data['source_ip'] = $hostname . " (" . localip() .")";
    %data['dest_ip'] = ''; # Omitting since we don't really know the destination in this case
    %data['tool'] =  "Beacon";
    %data["user_context"] = $user;
    %data['description'] = "PID : " . $pid;
    %data['comments'] = "Initial callback!";
    %data['oplog_id'] = $oplog_id;

    $resp_code = oplog::post_command(%data);

} 

on beacon_input {
    # Create an oplog entry for each Beacon command
    # To do: Should we exclude certain commands from logging?
    local('$url $oplog_id $url $operator %data $api_key $urlobj $con $wr $responseCode $resp_code $localIP $destIP $userContext $command $logfile $header');
    $url = $oplog::GhostwriterOplogURL;
    $oplog_id = $oplog::GhostwriterOplogID;

    # Do nothing if oplog variables aren't configured
    if (!$url || !$oplog_id) {
        return;
    }
    if ([$3 startsWith: "<--"] || [$3 startsWith: "#"]) {
        return;
    }

    $url .= "/oplog/api/entries/";
    local('$bid $hostname $user $desc $mtime $hostname $pid');
    $bid = $1;
    $operator = $2;
    $command = $3;
    $mtime = $4;
    $hostname = binfo($bid, 'computer');
    $user = binfo($bid, 'user');
    $pid = binfo($bid, 'pid');

    %data['start_date'] = formatDate($mtime, "yyyy-MM-dd HH:mm:ss");
    %data['end_date'] = formatDate($mtime, "yyyy-MM-dd HH:mm:ss");
    %data['source_ip'] = $hostname . " (" . localip() .")";
    %data['dest_ip'] = ''; # Omitting since we don't really know the destination in this case
    %data["tool"] = "Beacon";
    %data["user_context"] = $user;
    %data["command"] = $command;
    %data["description"] = "PID: " . $pid;
    %data["operator_name"] = $operator;
    %data["oplog_id"] = $oplog_id;

    $resp_code = oplog::post_command(%data);

}

local('%data $resp_code $error_message');

# Check if oplogging was configured
 # If any variable is missing then report that oplog will be disabled and do nothing
if (!$oplog::GhostwriterOplogURL || !$oplog::GhostwriterOplogAPIKey || !$oplog::GhostwriterOplogID ) {
    $error_message = "[!] Ghostwriter operator logging is not enabled. Update oplog.cna on the teamserver.";
    elog($error_message);
    return 1;
}
else {
    # Send our initialization message to Ghostwriter
    # Create a dictionary to hold our initialization message
    %data['start_date'] = formatDate("yyyy-MM-dd HH:mm:ss");
    %data['end_date'] = formatDate("yyyy-MM-dd HH:mm:ss");
    %data['source_ip'] = "Cobalt Strike Teamserver";
    %data['dest_ip'] = "";
    %data["tool"] = "Cobalt Strike";
    %data["user_context"] = "";
    %data["command"] = "";
    %data["description"] = 'Initial entry from CS Oplogging! If you\'re seeing this then oplog syncing is working for this C2 server!';
    %data["operator_name"] = "";
    %data["oplog_id"] = $oplog::GhostwriterOplogID;
    
    $resp_code = oplog::post_command(%data);

    if( $resp_code == 201 ) {
        elog("[!] Ghostwriter operator logging is configured and working!");
    }
}
